%{
//ignore_for_file: prefer_conditional_assignment, prefer_final_locals

import 'package:source_span/source_span.dart';

void main(List<String> args) {
  const source = '{"rocket": "ðŸš€ flies to the stars"}';
  final result = parse(source);
  print(result);
}

}%

Start =>
  S
  $ = Value
  Eof

`List<Object?>`
Array =>
  '['
  S
  n = Values?
  ']'
  S
  $ = { $$ = n ?? const []; }

`bool`
Boolean('boolean') =>
  'false'
  S
  $ = { $$ = false; }
  ----
  'true'
  S
  $ = { $$ = true; }

`String`
Chars =>
  n = (
    Unescaped
    ----
    [\\]
    $ = Escaped
  )+
  $ = { $$ = n.join(); }

`String`
Escaped('Malformed escape sequence') =>
  [u] $ = Hex
  ----
  c = ["/\\bfnrt]
  $ = { $$ = switch(c) {
        0x22 => '"',
        0x5C => '\\',
        0x2F => '/',
        0x62 => '\b',
        0x66 => '\f',
        0x6E => '\n',
        0x72 => '\r',
        0x74 => '\t',
        _ => String.fromCharCode(c),
    };
  }

`void`
Eof('end of file') =>
  !.

 `String`
Hex('4 hex digits') =>
  # Repeat 4 times
  { var n = 0; }
  s = <
    @while (*) {
      [a-fA-F0-9]
      & { ++n < 4 }
    }
  >
  # Check the counter
  & { n == 4 }
  $ = { $$ = String.fromCharCode(int.parse(s, radix: 16)); }

`MapEntry<String, Object?>`
Member =>
  k = String
  ':'
  S
  v = Value
  $ = { $$ = MapEntry(k, v); }

`List<MapEntry<String, Object?>>`
Members =>
  m = Member
  { final l = [m]; }
  @while (*) {
    ','
    S
    m = Member
    { l.add(m); }
  }
  $ = { $$ = l; }

`num`
Number('number') =>
  { var ok = true; }
  n = <
    [-]?
    (
      [0]
      ----
      [1-9]
      [0-9]*
    )
    (
      [.]
      { ok = false; } (
        [0-9]+
        { ok = true; }
        ~ { message = 'Expected decimal digit' }
      )
    )?
    (
      [eE]
      { ok = false; } (
        [-+]?
        [0-9]+
        { ok = true; }
        ~ { message = 'Expected decimal digit' }
      )
    )?
  >
  & { ok }
  S
  $ = { $$ = num.parse(n); }

`Object?`
Null =>
  'null'
  S
  $ = { $$ = null; }

`Map<String, Object?>`
Object =>
  '{'
  S
  m = Members?
  '}'
  S
  $ = { $$ = Map.fromEntries(m ?? const []); }

`String`
String =>
  '"'
  c = Chars?
  '"'
  S
  $ = { $$ = c ?? ''; }

Unescaped =>
  <[^{0-1F}"\\]+>

`List<Object?>`
Values =>
v = Value
{ final l = [v]; }
@while(*) {
  ','
  S
  v = Value
  { l.add(v); }
}
$ = { $$ = l; }

`Object?`
Value =>
  String
  ----
  Array
  ----
  Number
  ----
  Boolean
  ----
  Null
  ----
  Object

`void`
S =>
  [ \n\r\t]*
